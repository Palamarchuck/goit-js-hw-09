{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,UAAWC,SAASC,cAAc,uBAClCC,SAAUF,SAASC,cAAc,sBACjCE,WAAYH,SAASC,cAAc,wBACnCG,UAAWJ,SAASC,cAAc,UAClCI,KAAML,SAASC,cAAc,UAG/BH,EAAKO,KAAKC,iBAAiB,UAG3B,SAAsBC,GACtBA,EAAEC,iBAEA,IAAIC,EAAaC,OAAOZ,EAAKC,UAAUY,OACnCC,EAASF,OAAOZ,EAAKK,WAAWQ,OAChCE,EAAYH,OAAOZ,EAAKI,SAASS,OACjCG,EAAc,EAEdC,EAAW,EAGf,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAQI,GAAK,EAE/BC,YAAW,KACXF,EAAWC,EACXF,EAAcL,EAAaI,EAAYG,EACvCE,QAAQC,IAAIL,GAERM,EAAcL,EAAUD,GACrBO,MAAK,EAACC,SAAEA,EAAQC,MAAEA,MACjB3B,EAAA4B,OAAOC,QAAQ,uBAAqBH,QAAiBC,UAEtDG,OAAM,EAACJ,SAAEA,EAAQC,MAAEA,MACd3B,EAAA4B,OAAOG,QAAQ,sBAAoBL,QAAeC,YAG/DV,GAGH,SAASO,EAAcE,EAAUC,GAC/B,MAAMK,EAAgBC,KAAKC,SAAW,GAYtC,OAXgB,IAAIC,SAAQ,CAACC,EAASC,KACpChB,YAAW,KACLW,EACFI,EAAQ,C,SAACV,E,MAAUC,IAEnBU,EAAO,C,SAACX,E,MAAUC,MAEnBA","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  delayForm: document.querySelector('input[name=\"delay\"]'),\n  stepForm: document.querySelector('input[name=\"step\"]'),\n  amountForm: document.querySelector('input[name=\"amount\"]'),\n  btnCreate: document.querySelector('button'),\n  form: document.querySelector('.form'),\n}\n\nrefs.form.addEventListener('submit', onFormSubmit);\n\n\nfunction onFormSubmit(e) {\ne.preventDefault();\n\n  let firstDelay = Number(refs.delayForm.value);\n  let amount = Number(refs.amountForm.value);\n  let lastDelay = Number(refs.stepForm.value);\n  let secondDelay = 0;\n    \n  let position = 0;\n\n\n  for (let i = 1; i < amount; i += 1) {\n    \n    setTimeout(() => {\n    position = i;\n    secondDelay = firstDelay + lastDelay * i;\n    console.log(secondDelay);\n      \n        createPromise(position, secondDelay,)\n          .then(({ position, delay }) => {\n            Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n              })\n          .catch(({ position, delay }) => {\n                Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n              });\n\n}, lastDelay);\n}\n  \nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({position, delay});\n      } else {\n        reject({position, delay});\n      }\n    }, delay);\n  \n  });\n\n  return promise;\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$refs","delayForm","document","querySelector","stepForm","amountForm","btnCreate","form","addEventListener","e","preventDefault","firstDelay","Number","value","amount","lastDelay","secondDelay","position1","i","setTimeout","console","log","createPromise","then","position","delay","Notify","success","catch","failure","shouldResolve","Math","random","Promise","resolve","reject"],"version":3,"file":"03-promises.92e71ab5.js.map"}