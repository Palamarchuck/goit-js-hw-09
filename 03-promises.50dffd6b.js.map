{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,UAAWC,SAASC,cAAc,uBAClCC,SAAUF,SAASC,cAAc,sBACjCE,WAAYH,SAASC,cAAc,wBACnCG,UAAWJ,SAASC,cAAc,UAClCI,KAAML,SAASC,cAAc,UAG/BH,EAAKO,KAAKC,iBAAiB,UAG3B,SAAsBC,G,kBAalBC,YAAW,WAgBf,IAAuBC,EAAUC,EACzBC,EAhBJC,EAAWC,EACXC,EAAcC,EAAaC,EAAYH,EACvCI,QAAQC,IAAIJ,IAaOL,EAXDG,EAWWF,EAXDI,EAYxBH,EAAgBQ,KAAKC,SAAW,GACtB,IAAIC,SAAQ,SAACC,EAASC,GACpCf,YAAW,WACLG,EACFW,EAAQ,CAACb,WAAUC,UAEnBa,EAAO,CAACd,WAAUC,YAEnBA,OAnBIc,MAAK,SAAAC,G,IAAGhB,EAAQgB,EAARhB,SAAUC,EAAKe,EAALf,MACjBd,EAAA8B,OAAOC,QAAQ,uBAA6CC,OAApBnB,GAAY,EAAE,QAAYmB,OAANlB,EAAM,UAEnEmB,OAAM,SAAAJ,G,IAAGhB,EAAQgB,EAARhB,SAAUC,EAAKe,EAALf,MACdd,EAAA8B,OAAOI,QAAQ,sBAA0CF,OAApBnB,GAAY,EAAE,QAAYmB,OAANlB,EAAM,YAG5EM,IAzBHT,EAAEwB,iBAUA,IARA,IAAIhB,EAAaiB,OAAOlC,EAAKC,UAAUkC,OACnCC,EAASF,OAAOlC,EAAKK,WAAW8B,OAChCjB,EAAYgB,OAAOlC,EAAKI,SAAS+B,OACjCnB,EAAc,EAEdF,EAAW,EAGNuB,EAAI,EAAGA,EAAID,EAAQC,GAAK,EAACC,EAAAD,M","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  delayForm: document.querySelector('input[name=\"delay\"]'),\n  stepForm: document.querySelector('input[name=\"step\"]'),\n  amountForm: document.querySelector('input[name=\"amount\"]'),\n  btnCreate: document.querySelector('button'),\n  form: document.querySelector('.form'),\n}\n\nrefs.form.addEventListener('submit', onFormSubmit);\n\n\nfunction onFormSubmit(e) {\ne.preventDefault();\n\n  let firstDelay = Number(refs.delayForm.value);\n  let amount = Number(refs.amountForm.value);\n  let lastDelay = Number(refs.stepForm.value);\n  let secondDelay = 0;\n    \n  let position = 0;\n\n\n  for (let i = 0; i < amount; i += 1) {\n    \n    setTimeout(() => {\n    position = i;\n    secondDelay = firstDelay + lastDelay * i;\n    console.log(secondDelay);\n      \n        createPromise(position, secondDelay,)\n          .then(({ position, delay }) => {\n            Notify.success(`✅ Fulfilled promise ${position += 1} in ${delay}ms`);\n              })\n          .catch(({ position, delay }) => {\n                Notify.failure(`❌ Rejected promise ${position += 1} in ${delay}ms`);\n              });\n\n}, lastDelay);\n}\n  \nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({position, delay});\n      } else {\n        reject({position, delay});\n      }\n    }, delay);\n  \n  });\n\n  return promise;\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$refs","delayForm","document","querySelector","stepForm","amountForm","btnCreate","form","addEventListener","e","setTimeout","position","delay","shouldResolve","position1","i","secondDelay","firstDelay","lastDelay","console","log","Math","random","Promise","resolve","reject","then","param","Notify","success","concat","catch","failure","preventDefault","Number","value","amount","i1","_loop"],"version":3,"file":"03-promises.50dffd6b.js.map"}